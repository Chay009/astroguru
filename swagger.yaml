openapi: 3.0.3
info:
  title: AstroGuru App API
  description: Backend API for the AstroGuru  App, enabling astroguru consultations with AI Gurus. User registration and login are handled via an OTP-based flow. All authenticated endpoints require a valid JWT token in the Authorization header, which is validated server-side for each request.
  version: 1.0.0
servers:
  - url: https://api.astroguruapp.com/v1
    description: Production server

paths:
  /auth/send_otp:
    post:
      summary: Send OTP for Registration or Login
      description: Sends a one-time password (OTP) to the user's phone number. Used for both new user registration and existing user login.
      operationId: sendOtp
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  description: User's phone number with country code (E.164 format)
                  example: "+919876543210"
              required:
                - phone
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OTP_SENT"
                  expires_in:
                    type: integer
                    description: Time in seconds until OTP expires
                    example: 300
        '400':
          description: Invalid phone number
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "INVALID_PHONE"
                message: "The phone number format is incorrect."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify-otp:
    post:
      summary: Verify OTP and Register/Login User
      description: Verifies the OTP. If the user doesn’t exist, registers them with the provided phone number and minimal details. If the user exists, logs them in. Returns a JWT token and user details. Refresh tokens are managed internally and included in the user object.
      operationId: verifyOtp
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: "+919876543210"
                otp:
                  type: string
                  description: 6-digit OTP entered by the user
                  example: "123456"
              required:
                - phone
                - otp
      responses:
        '200':
          description: User authenticated (registered or logged in)
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication, validated on all subsequent requests
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid OTP or phone number
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "INVALID_OTP"
                message: "The OTP entered is incorrect."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: Logout User
      description: Invalidates the current JWT token, effectively logging the user out. Requires a valid token in the Authorization header, which is validated server-side.
      operationId: logout
      tags:
        - auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "LOGGED_OUT"
        '401':
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/profile:
    get:
      summary: Fetch User Profile
      description: Returns the authenticated user's profile details. Requires a valid JWT token, validated server-side.
      operationId: getUserProfile
      tags:
        - user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user:update:
    post:
      summary: Update User Profile
      description: Allows the user to update their profile information. Fields like refresh_tokens and guru_ids_interacted are managed server-side. Requires a valid JWT token, validated server-side.
      operationId: updateUserProfile
      tags:
        - user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Ravi"
                dob:
                  type: string
                  format: date
                  example: "1990-01-01"
                tob:
                  type: string
                  example: "10:15"
                gender:
                  type: string
                  enum: ["male", "female", "other"]
                  example: "male"
                profile_pic:
                  type: string
                  example: "https://cdn.example.com/image.png"
                location_of_birth:
                  $ref: '#/components/schemas/Location'
              required: []
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "UPDATED"
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /locations/suggestions:
    get:
      summary: Get real-time location suggestions
      description: Returns a list of location suggestions based on partial input as the user types (minimum 2 characters).
      operationId: getLocationSuggestions
      tags:
        - location search
      parameters:
        - name: query
          in: query
          description: Partial location name entered by the user (minimum 2 characters)
          required: true
          schema:
            type: string
            minLength: 2
            example: "Lon"
        - name: limit
          in: query
          description: Maximum number of suggestions to return (default 10)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
            example: 5
      responses:
        '200':
          description: Successful response with location suggestions
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggestions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Unique identifier for the location
                          example: 1
                        name:
                          type: string
                          description: Full name of the location
                          example: "London"
                        country:
                          type: string
                          description: Country of the location
                          example: "United Kingdom"
                    description: List of matching locations
                required:
                  - suggestions
              example:
                suggestions:
                  - id: 1
                    name: "London"
                    country: "United Kingdom"
                  - id: 2
                    name: "Long Beach"
                    country: "United States"
                  - id: 3
                    name: "Londoño"
                    country: "Colombia"
        '400':
          description: Invalid input (e.g., query less than 2 characters)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Query must be at least 2 characters long"
        '429':
          description: Too many requests (rate limit exceeded)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Rate limit exceeded. Please try again later."
      x-rate-limit:
        limit: 100
        window: 60
        description: 100 requests per minute per client



components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
          description: Unique identifier for the user
          example: "user_123"
        name:
          type: string
          description: User's full name
          example: "Ravi"
        dob:
          type: string
          format: date
          description: Date of birth
          example: "1990-01-01"
        tob:
          type: string
          description: Time of birth (in HH:MM format)
          example: "10:15"
        gender:
          type: string
          enum: ["male", "female", "other"]
          description: User's gender
          example: "male"
        profile_pic:
          type: string
          description: URL to the user's profile picture
          example: "https://cdn.example.com/image.png"
        location_of_birth:
          $ref: '#/components/schemas/Location'
          description: Location where the user was born
        refresh_tokens:
          type: array
          items:
            type: string
          description: Array of refresh tokens managed internally by the server
          example: ["REFRESH_TOKEN_1", "REFRESH_TOKEN_2"]
        guru_ids_interacted:
          type: array
          items:
            type: string
          description: Array of Guru IDs the user has interacted with (e.g., ai_smart_match_01)
          example: ["guru_id_1", "guru_id_2"]
        phone_verified:
          type: boolean
          description: Indicates if the user's phone number is verified
          example: true
      required:
        - user_id
        - name
        - dob
        - gender
        - phone_verified

    Location:
      type: object
      properties:
        state:
          type: string
          example: "Delhi"
        city:
          type: string
          example: "New Delhi"
        country:
          type: string
          example: "India"
        lat:
          type: number
          format: float
          example: 28.6
        long:
          type: number
          format: float
          example: 77.2
        timezone:
          type: object
          properties:
            hours:
              type: integer
              example: 5
            minutes:
              type: integer
              example: 30
            direction:
              type: string
              enum: ["E", "W"]
              example: "E"
      required:
        - country
        - lat
        - long
        - timezone

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "INVALID_OTP"
        message:
          type: string
          example: "The OTP entered is incorrect."
      required:
        - error
        - message

securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT

security:
  - bearerAuth: []